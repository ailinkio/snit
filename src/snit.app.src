{application, snit,
 [{description, "A SNI terminator library"},
  {vsn, "0.3.0"},
  {registered, []},
  {mod, {snit_app, []}},
  {applications,
   [kernel,
    stdlib,
    ssl,
    ranch
   ]},
  {env,[
    %% To compare cipher suites and make sure the OpenSSL name properly matches
    %% the internal Erlang name, run the following to generate a translation
    %% table in Erlang/OTP 18.0 to 18.2:
    %%
    %%   Table = lists:sort([{OpenSSL, [Erl]}
    %%                       || Erl <- ssl:cipher_suites(),
    %%                          Raw <- [ssl_cipher:suite(Erl)],
    %%                          OpenSSL <- [ssl_cipher:openssl_suite_name(Raw)]]).
    %%
    %% And the following from 18.3 to generate a backwards-compatible list:
    %%
    %%   Table = lists:sort([{OpenSSL,
    %%                         case Erl of
    %%                           {_,_,_} -> [Erl];
    %%                           {A,B,C,D} -> [{A,B,C},{A,B,C,D}]
    %%                          end}
    %%                      || Erl <- ssl:cipher_suites(),
    %%                         Raw <- [case Erl of
    %%                                   {_,_,_} -> ssl_cipher:suite(Erl);
    %%                                   {A,B,C,_} -> ssl_cipher:suite({A,B,C})
    %%                                 end],
    %%                         OpenSSL <- [ssl_cipher:openssl_suite_name(Raw)]])
    %%
    %% Given a list of OpenSSL cipher suites, the configuration below can be
    %% generated by calling:
    %%
    %% [lists:keyfind(Suite, 1, Table) || Suite <- OpenSSLSuites].
    %%
    %% If any value is `false', the generation failed.
    %%
    %% Note that the OpenSSL translation layer is seen as there for backwards-
    %% compatibility reasons by the OTP team and may eventually be deprecated.
    {cipher_suites, [
        {"ECDHE-ECDSA-AES256-GCM-SHA384",
         [{ecdhe_ecdsa,aes_256_gcm,null}, {ecdhe_ecdsa,aes_256_gcm,null,sha384}]},
        {"ECDHE-ECDSA-AES128-GCM-SHA256",
         [{ecdhe_ecdsa,aes_128_gcm,null}, {ecdhe_ecdsa,aes_128_gcm,null,sha256}]},
        {"ECDHE-RSA-AES128-GCM-SHA256",
         [{ecdhe_rsa,aes_128_gcm,null}, {ecdhe_rsa,aes_128_gcm,null,sha256}]},
        % missing pre-18.3
        % {"ECDHE-RSA-AES256-GCM-SHA384",
        %  [{ecdhe_rsa,aes_256_gcm,null}, {ecdhe_rsa,aes_256_gcm,null,sha384}]}
        {"ECDHE-ECDSA-AES256-SHA384",
         [{ecdhe_ecdsa,aes_256_cbc,sha384}, {ecdhe_ecdsa,aes_256_cbc,sha384,sha384}]},
        {"ECDHE-RSA-AES256-SHA384",
         [{ecdhe_rsa,aes_256_cbc,sha384}, {ecdhe_rsa,aes_256_cbc,sha384,sha384}]},
        {"ECDHE-RSA-AES256-SHA",
         [{ecdhe_rsa,aes_256_cbc,sha}]},
        {"ECDHE-ECDSA-AES256-SHA",
         [{ecdhe_ecdsa,aes_256_cbc,sha}]},
        {"ECDHE-ECDSA-AES128-SHA256",
         [{ecdhe_ecdsa,aes_128_cbc,sha256}, {ecdhe_ecdsa,aes_128_cbc,sha256,sha256}]},
        {"ECDHE-RSA-AES128-SHA256",
         [{ecdhe_rsa,aes_128_cbc,sha256}, {ecdhe_rsa,aes_128_cbc,sha256,sha256}]},
        {"ECDHE-ECDSA-AES128-SHA",
         [{ecdhe_ecdsa,aes_128_cbc,sha}]},
        {"ECDHE-RSA-AES128-SHA",
         [{ecdhe_rsa,aes_128_cbc,sha}]},
        {"AES256-GCM-SHA384",
         [{rsa,aes_256_gcm,null},{rsa,aes_256_gcm,null,sha384}]},
        {"AES256-SHA256",
         [{rsa,aes_256_cbc,sha256}]},
        {"AES256-SHA",
         [{rsa,aes_256_cbc,sha}]},
        {"AES128-GCM-SHA256",
         [{rsa,aes_128_gcm,null},{rsa,aes_128_gcm,null,sha256}]},
        {"AES128-SHA256",
         [{rsa,aes_128_cbc,sha256}]},
        {"AES128-SHA",
         [{rsa,aes_128_cbc,sha}]}
    ]}
  ]},
  {modules, []}
 ]}.
